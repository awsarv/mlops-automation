name: CI/CD Deploy to EC2 with Monitoring

on:
  push:
    branches: [mlops, mlops-part2]
  workflow_dispatch:
  


jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Lint code
        run: |
          pip install flake8
          flake8 src/

      - name: Train and log models via Docker (shared volumes)
        run: |
          mkdir -p mlruns models data
          docker run --rm \
            -v ${{ github.workspace }}/data:/app/data \
            -v ${{ github.workspace }}/models:/app/models \
            -v ${{ github.workspace }}/mlruns:/mlflow/mlruns \
            -e MLFLOW_TRACKING_URI=file:/mlflow/mlruns \
            mlopsdemo/housing-api:latest \
            python src/train.py

      - name: Build, tag, and push Docker image to Docker Hub
        run: |
          docker build -t mlopsdemo/housing-api:latest .
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | \
            docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push mlopsdemo/housing-api:latest

      - name: Create .env for Docker Compose
        run: |
          echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" > .env

      - name: Debug - Check all secrets variables
        run: |
          echo "=== CHECKING ALL SECRETS VARIABLES ==="
          echo "EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}"
          echo "EC2_SSH_USER: ${{ secrets.EC2_SSH_USER }}"
          echo "DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}"
          echo "GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}"
          echo ""
          echo "=== CHECKING SSH KEY (first 50 characters) ==="
          echo "${{ secrets.EC2_SSH_KEY }}" | head -c 50
          echo "..."
          echo ""
          echo "=== CHECKING SSH KEY (last 50 characters) ==="
          echo "${{ secrets.EC2_SSH_KEY }}" | tail -c 50
          echo ""
          echo "=== CHECKING DOCKERHUB TOKEN (first 20 characters) ==="
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | head -c 20
          echo "..."
          echo ""
          echo "=== VERIFICATION COMPLETE ==="

      - name: Save SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_deploy_key
          chmod 600 ec2_deploy_key

      - name: Test SSH connection to EC2
        run: |
          echo "Testing SSH connection to EC2..."
          echo "Target: ${{ secrets.EC2_SSH_USER }}@${{ secrets.EC2_PUBLIC_IP }}"
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ec2_deploy_key ${{ secrets.EC2_SSH_USER }}@${{ secrets.EC2_PUBLIC_IP }} "echo 'SSH connection successful! EC2 is reachable.'"

      - name: Copy code and .env to EC2
        run: |
          echo "Creating mlops-app directory on EC2 if it doesn't exist..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ec2_deploy_key ${{ secrets.EC2_SSH_USER }}@${{ secrets.EC2_PUBLIC_IP }} "mkdir -p mlops-app"
          
          echo "Syncing files to EC2 (this may take a few minutes)..."
          rsync -avz --timeout=300 --progress -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ec2_deploy_key" . ${{ secrets.EC2_SSH_USER }}@${{ secrets.EC2_PUBLIC_IP }}:/home/${{ secrets.EC2_SSH_USER }}/mlops-app/
          
          echo "Verifying .env file exists on EC2..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ec2_deploy_key ${{ secrets.EC2_SSH_USER }}@${{ secrets.EC2_PUBLIC_IP }} "cd mlops-app && ls -al .env"

      - name: Remote deploy on EC2 (docker-compose up)
        env:
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_SSH_USER: ${{ secrets.EC2_SSH_USER }}
        run: |
          echo "Deploying to EC2 using Docker Compose..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ec2_deploy_key $EC2_SSH_USER@$EC2_PUBLIC_IP << 'EOF'
            cd mlops-app
            echo "Pulling latest Docker image..."
            docker pull mlopsdemo/housing-api:latest
            echo "Stopping existing containers..."
            docker-compose down || true
            echo "Starting new containers..."
            docker-compose up -d --remove-orphans
            echo "Deployment completed!"
          EOF

      - name: Cleanup SSH key
        run: rm -f ec2_deploy_key
