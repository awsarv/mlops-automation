name: CI/CD Deploy to EC2 with Monitoring

on:
  push:
    branches: [mlops]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_IMAGE_URI: ${{ secrets.ECR_IMAGE_URI }}
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Lint code
        run: |
          pip install flake8
          flake8 src/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to ECR
        run: |
          docker build -t $ECR_IMAGE_URI .
          docker push $ECR_IMAGE_URI

      - name: Create .env for Docker Compose
        run: |
          echo "ECR_IMAGE_URI=${{ secrets.ECR_IMAGE_URI }}" > .env
          echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" >> .env

      - name: Save SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_deploy_key
          chmod 600 ec2_deploy_key

      - name: Copy code and .env to EC2
        run: |
          rsync -az -e "ssh -o StrictHostKeyChecking=no -i ec2_deploy_key" . ${{ secrets.EC2_SSH_USER }}@${{ secrets.EC2_PUBLIC_IP }}:/home/${{ secrets.EC2_SSH_USER }}/your-app-directory/
          ssh -o StrictHostKeyChecking=no -i ec2_deploy_key ${{ secrets.EC2_SSH_USER }}@${{ secrets.EC2_PUBLIC_IP }} "cd your-app-directory && ls -al .env"

      - name: Remote deploy on EC2 (docker-compose up)
        env:
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_SSH_USER: ${{ secrets.EC2_SSH_USER }}
          ECR_IMAGE_URI: ${{ secrets.ECR_IMAGE_URI }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_deploy_key $EC2_SSH_USER@$EC2_PUBLIC_IP << EOF
            cd your-app-directory
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $(echo $ECR_IMAGE_URI | cut -d'/' -f1)
            docker pull $ECR_IMAGE_URI
            docker-compose down || true
            docker-compose up -d --remove-orphans
          EOF

      - name: Cleanup SSH key
        run: rm -f ec2_deploy_key
